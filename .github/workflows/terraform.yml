name: Terraform CI/CD

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      target_env:
        description: "Environment to apply (dev/prod)"
        type: choice
        options: [ dev, prod ]
        required: true
        default: dev

concurrency:
  group: tf-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write

env:
  TF_WORKDIR: devops/terraform
  TF_VERSION: 1.7.5

jobs:
  fmt_validate_plan:
    name: fmt/validate/plan (dev)
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    environment: dev

    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Export ARM_* for Terraform
        shell: bash
        run: |
          echo "ARM_CLIENT_ID=$(jq -r .clientId <<< '${{ secrets.AZURE_CREDENTIALS }}')" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$(jq -r .clientSecret <<< '${{ secrets.AZURE_CREDENTIALS }}')" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(jq -r .tenantId <<< '${{ secrets.AZURE_CREDENTIALS }}')" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$(jq -r .subscriptionId <<< '${{ secrets.AZURE_CREDENTIALS }}')" >> $GITHUB_ENV
          echo "ARM_USE_AZURECLI=false" >> $GITHUB_ENV

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform init
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform init -upgrade -input=false

      - name: Terraform fmt
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform fmt -check -recursive

      - name: Terraform validate
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform validate

      - name: Terraform plan (dev)
        working-directory: ${{ env.TF_WORKDIR }}
        shell: bash
        run: |
          terraform plan -input=false -lock-timeout=300s \
            -var="sql_admin_password=${{ secrets.SQL_ADMIN_PASSWORD_DEV }}" \
            -var-file="environments/dev/main.tfvars" \
            -out=tfplan-dev.bin

      - name: Upload plan (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-dev
          path: ${{ env.TF_WORKDIR }}/tfplan-dev.bin

  apply_manual:
    name: apply (manual env)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ inputs.target_env }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Export ARM_* for Terraform
        shell: bash
        run: |
          echo "ARM_CLIENT_ID=$(jq -r .clientId <<< '${{ secrets.AZURE_CREDENTIALS }}')" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$(jq -r .clientSecret <<< '${{ secrets.AZURE_CREDENTIALS }}')" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(jq -r .tenantId <<< '${{ secrets.AZURE_CREDENTIALS }}')" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$(jq -r .subscriptionId <<< '${{ secrets.AZURE_CREDENTIALS }}')" >> $GITHUB_ENV
          echo "ARM_USE_AZURECLI=false" >> $GITHUB_ENV

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Select SQL password by env
        shell: bash
        run: |
          if [ "${{ inputs.target_env }}" = "prod" ]; then
            echo "TF_SQL_PW=${{ secrets.SQL_ADMIN_PASSWORD_PROD }}" >> $GITHUB_ENV
          else
            echo "TF_SQL_PW=${{ secrets.SQL_ADMIN_PASSWORD_DEV }}" >> $GITHUB_ENV
          fi

      - name: Terraform init
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform init -upgrade -input=false

      - name: Terraform plan (${{ inputs.target_env }})
        working-directory: ${{ env.TF_WORKDIR }}
        shell: bash
        run: |
          terraform plan -input=false -lock-timeout=300s \
            -var="sql_admin_password=${TF_SQL_PW}" \
            -var-file="environments/${{ inputs.target_env }}/main.tfvars" \
            -out="tfplan-${{ inputs.target_env }}.bin"

      - name: Terraform apply (${{ inputs.target_env }})
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform apply -input=false -auto-approve "tfplan-${{ inputs.target_env }}.bin"
